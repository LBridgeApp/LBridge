Настройка связи с LBridge:

1) Нужно добавить этот класс LBridge.java в xDrip+.

2) Заменить метод в NFCReaderX.java на этот:
public static boolean HandleGoodReading(final String tagId, byte[] data1, final long CaptureDateTime, final boolean allowUpload, byte[] patchUid, byte[] patchInfo) {
    new Thread(new LBridge(patchUid, patchInfo, data1)).start();
    return HandleGoodReading(tagId, data1, CaptureDateTime, allowUpload, patchUid, patchInfo, false, null, null);
}

2) В NFCReaderX.java в методе HandleGoodReading
добавить строчку new Thread(new LBridge(patchUid, patchInfo, data1)).start();
3) Создать файл в каталоге телефона /Xdrip+/LBridge.config, в котором записать ip и порт сервера LBridge.

----------------------------------------------------------------------------------------------------

package com.eveningoutpost.dexdrip;
import android.os.Environment;
import android.util.Log;
import com.google.gson.Gson;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Locale;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class LBridge implements Runnable {
    private final LibreData libreData;
    LBridge(byte[] patchUID, byte[] patchInfo, byte[] payload) {
        this.libreData = new LibreData(patchUID, patchInfo, payload);
    }

    private void sendData(String serverUrl, String libreDataJson) {
        OkHttpClient client = new OkHttpClient();
        RequestBody requestBody = RequestBody.create(MediaType.parse("application/json"), libreDataJson.getBytes());

        Request request = new Request.Builder()
                .url(serverUrl)
                .post(requestBody)
                .addHeader("Sender", "Xdrip+")
                .addHeader("MessageTo", "LBridge")
                .build();

        try (Response response = client.newCall(request).execute()) {
            int responseCode = response.code();
            String logMsg = String.format(Locale.ROOT, "Response code: %d", responseCode);
            Log.d("LBridge", logMsg);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    String readServerUrlFile() throws Exception {
        // считаем, что есть разрешение на чтение, в противном случае приложение упадет.
        File file = new File(Environment.getExternalStorageDirectory(), "Xdrip+/LBridge.config");
        FileInputStream inputStream = new FileInputStream(file);
        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
        StringBuilder stringBuilder = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            stringBuilder.append(line);
        }

        reader.close();
        inputStream.close();

        return stringBuilder.toString();
    }

    @Override
    public void run() {
        try {
            String serverUrl = this.readServerUrlFile();
            String libreDataJson = new Gson().toJson(this.libreData);
            this.sendData(serverUrl, libreDataJson);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static class LibreData {
        final byte[] patchUID;
        final byte[] patchInfo;
        final byte[] payload;
        final long timestamp;
        LibreData(final byte[] patchUID, final byte[] patchInfo, final byte[] payload) {
            this.patchUID = patchUID;
            this.patchInfo = patchInfo;
            this.payload = payload;
            this.timestamp = System.currentTimeMillis();
        }
    }
}